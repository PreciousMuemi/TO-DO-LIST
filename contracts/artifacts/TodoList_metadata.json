{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "content",
						"type": "string"
					}
				],
				"name": "TodoAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newContent",
						"type": "string"
					}
				],
				"name": "TodoContentUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "TodoDeleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum TodoList.TodoStatus",
						"name": "status",
						"type": "uint8"
					}
				],
				"name": "TodoStatusUpdated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_content",
						"type": "string"
					}
				],
				"name": "addTodo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "deleteTodo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllTodoIds",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllTodos",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "content",
								"type": "string"
							},
							{
								"internalType": "enum TodoList.TodoStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "isDeleted",
								"type": "bool"
							}
						],
						"internalType": "struct TodoList.Todo[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "getTodo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "content",
						"type": "string"
					},
					{
						"internalType": "enum TodoList.TodoStatus",
						"name": "status",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "isDeleted",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalTodos",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "todoIds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_newContent",
						"type": "string"
					}
				],
				"name": "updateContent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "enum TodoList.TodoStatus",
						"name": "_status",
						"type": "uint8"
					}
				],
				"name": "updateStatus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract is basically my life organized on the blockchain. It's a todo list for a 21-year-old navigating life, code, and vibes.",
			"kind": "dev",
			"methods": {
				"addTodo(string)": {
					"details": "Add a new task to the list. Public facing function.",
					"params": {
						"_content": "The description of the task."
					}
				},
				"constructor": {
					"details": "Constructor: Contract created! Let's pre-fill some realistic tasks. This is where the daily grind gets listed."
				},
				"deleteTodo(uint256)": {
					"details": "Mark a todo as deleted. On blockchain, we usually mark instead of truly deleting.",
					"params": {
						"_id": "The ID of the task to delete."
					}
				},
				"getAllTodoIds()": {
					"details": "Get all the todo IDs. Useful for frontends to iterate through tasks.",
					"returns": {
						"_0": "An array of all todo IDs."
					}
				},
				"getAllTodos()": {
					"details": "Get all todo items. This iterates through all IDs and fetches each todo. Note: This can be gas-intensive for a very large number of todos.",
					"returns": {
						"_0": "An array of all Todo structs."
					}
				},
				"getTodo(uint256)": {
					"details": "Get the details of a specific task.",
					"params": {
						"_id": "The ID of the task to retrieve."
					},
					"returns": {
						"content": "The task description.",
						"id": "The task ID.",
						"isDeleted": "Whether the task is marked as deleted.",
						"status": "The current status of the task."
					}
				},
				"getTotalTodos()": {
					"details": "Get the total number of tasks in the list (including deleted ones).",
					"returns": {
						"_0": "The total count of tasks added."
					}
				},
				"updateContent(uint256,string)": {
					"details": "Update the content of a task. Need to rephrase something?",
					"params": {
						"_id": "The ID of the task to update.",
						"_newContent": "The new description of the task."
					}
				},
				"updateStatus(uint256,uint8)": {
					"details": "Update the status of a task. Did I finish it? Am I working on it?",
					"params": {
						"_id": "The ID of the task to update.",
						"_status": "The new status (Pending, InProgress, Completed, Deleted)."
					}
				}
			},
			"title": "TodoList",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/TodoList.sol": "TodoList"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/TodoList.sol": {
			"keccak256": "0x8ef1b06e227a6f692785a077027c2cfd0cb5b5188b23c22d39d43e9366fa0381",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3c038a0e283e66d732fa7a006b2da01a40bd8e8426988e4466e78d7cf36c781",
				"dweb:/ipfs/QmUxVcVanmLpVWk9rqMZKZAecAv6KyTGFbycoSBoEDbuXN"
			]
		}
	},
	"version": 1
}